# =============================================================
#   Makefile for NYADOS/NYACUS/NYAOS-II
#   executable by GNU Make
# =============================================================
#
# make 
#	実行ファイルの作成
# make clean
#	*.o,*.exe を削除
# make cleanobj
#	*.o を削除
# This Makefile is for GNU Make.
#
# make package
#	*.zip の作成
# make install
#	$(INSTALLDIR) へ実行ファイルのコピー

NAME=nyacus

# msys/cygwin
CP=cp -p
RM=rm -f
ZIP_PACK=zip -9X
# Win32 cmd
#CP=copy
#RM=del /q
#ZIP_PACK=zip -9XS

#exepack (upx - http://upx.sourceforge.net/)
EXEPACK=upx -9
#EXEPACK=echo

O=o
X=.exe

# コンパイラ設定 
# mingw のライブラリ構成は VC++ 準拠なので、暫定的に 
# -D_MSC_VER で VC++ 向けの設定に相乗りさせている。 
# mingw-special の g++ 3.3.3 と 3.4.2 ではコンパイルに成功。 
# (-Wall -pedantic だと 'comma at end of enumerator list' がエラー扱いで死亡)

# CCC=-DNDEBUG
CCC=-DNDEBUG
# GNU Make
CC=gcc
CXX=gcc
# CFLAGS=-O3 $(CCC) -mno-cygwin -D_MSC_VER=1000
CFLAGS=-Wall -O3 $(CCC) -mno-cygwin -D_MSC_VER=1000
CXXFLAGS=$(CFLAGS)
LIBS=-lole32 -luuid -lstdc++ -L/usr/lib/mingw/
LDFLAGS=-s

.SUFFIXES : $(X) .$(O) .res .rc .cpp .h

TARGET=$(NAME)$(X)

.cpp.$(O) :
	$(CXX) $(CXXFLAGS) -c -o $@ $<

# make install した時に実行ファイルをコピーするディレクトリ
INSTALLDIR=/usr/bin

# ------------------------------------------------------------
OBJ1=nyados.$(O) nnstring.$(O) nndir.$(O) twinbuf.$(O) mysystem.$(O) keyfunc.$(O)
OBJ2=getline.$(O) getline2.$(O) keybound.$(O) dosshell.$(O) nnhash.$(O)
OBJ3=writer.$(O) history.$(O) ishell.$(O) scrshell.$(O) wildcard.$(O) cmdchdir.$(O)
OBJ4=shell.$(O) shell4.$(O) foreach.$(O) which.$(O) reader.$(O) nnvector.$(O)
OBJ5=ntcons.$(O) shellstr.$(O) cmds1.$(O) cmds2.$(O) xscript.$(O) shortcut.$(O)
OBJ6=strfork.$(O) lsf.$(O) open.$(O)
OBJRC=nyacusrc.$(O)
OBJS=$(OBJ1) $(OBJ2) $(OBJ3) $(OBJ4) $(OBJ5) $(OBJ6) $(OBJRC)

$(TARGET) : $(OBJS) 
	$(CXX) $(CXXFLAGS) -o $(TARGET) $(OBJS) $(LDFLAGS) $(LIBS)
	$(EXEPACK) $(TARGET)

# メインルーチン
nyados.$(O)   : nyados.cpp   nnstring.h getline.h

# 一行入力
twinbuf.$(O)  : twinbuf.cpp  getline.h
getline.$(O)  : getline.cpp  getline.h nnstring.h
getline2.$(O) : getline2.cpp getline.h
keybound.$(O) : keybound.cpp getline.h
keyfunc.$(O) : keyfunc.cpp getline.h
dosshell.$(O) : dosshell.cpp getline.h
xscript.$(O) : xscript.cpp

# インタプリタ処理
shell.$(O)    : shell.cpp    shell.h 
shell4.$(O)   : shell4.cpp   shell.h nnstring.h
scrshell.$(O) : scrshell.cpp shell.h
ishell.$(O)   : ishell.cpp   shell.h ishell.h 
mysystem.$(O) : mysystem.cpp nnstring.h
shellstr.$(O) : shellstr.cpp

# 個別コマンド処理
cmds1.$(O) : cmds1.cpp shell.h nnstring.h
cmds2.$(O) : cmds2.cpp shell.h nnstring.h
cmdchdir.$(O)  : cmdchdir.cpp  shell.h nnstring.h nndir.h
foreach.$(O)   : foreach.cpp   shell.h
lsf.$(O) : lsf.cpp

# 共通ライブラリ
nnstring.$(O)  : nnstring.cpp  nnstring.h  nnobject.h
nnvector.$(O)  : nnvector.cpp  nnvector.h  nnobject.h
nnhash.$(O) : nnhash.cpp nnhash.h nnobject.h
strfork.$(O) : strfork.cpp

# 環境依存ライブラリ
writer.$(O)    : writer.cpp    writer.h
reader.$(O)    : reader.cpp    reader.h
nndir.$(O)       : nndir.cpp nndir.h
wildcard.$(O)  : wildcard.cpp  nnstring.h nnvector.h nndir.h
ntcons.$(O) : ntcons.cpp
open.$(O)  : open.cpp

# リソース 
nyacusrc.$(O)  : nyacus.rc redcat.ico
	windres --output-format=coff -o $@ $<

install :
	-$(CP) $(TARGET) $(INSTALLDIR)

package : $(NAME).txt $(TARGET)
	-$(RM) *.$(O)
	$(ZIP_PACK) $(NAME).zip $(NAME).txt $(TARGET) _$(NAME)
	$(ZIP_PACK) nyasrc.zip Makefile* *.cpp *.h *.tmpl

clean : cleanobj
	-$(RM) $(TARGET)

cleanobj : 
	-$(RM) $(OBJS) core

todo :
	ruby todo.rb todo.txt > todo.html

